(this["webpackJsonpgoit-react-hw-02-phonebook"]=this["webpackJsonpgoit-react-hw-02-phonebook"]||[]).push([[0],{13:function(t,e,n){t.exports={filterInput:"Filter_filterInput__39Pp6"}},14:function(t,e,n){t.exports={app:"App_app__3bZLL"}},2:function(t,e,n){t.exports={mainForm:"ContactForm_mainForm__3pvfU",label:"ContactForm_label__26Q5G",nameInput:"ContactForm_nameInput__X7-QF",telInput:"ContactForm_telInput__1g4N5",submitButton:"ContactForm_submitButton__1dPnB"}},21:function(t,e,n){},22:function(t,e,n){"use strict";n.r(e);var a=n(4),c=n.n(a),r=n(10),o=n.n(r),s=n(15),i=n(5),l=n(6),u=n(8),m=n(7),d=n(1),b=n(12),p=n(16),h=n(2),j=n.n(h),f=n(0),C=function(t){Object(u.a)(n,t);var e=Object(m.a)(n);function n(){var t;Object(i.a)(this,n);for(var a=arguments.length,c=new Array(a),r=0;r<a;r++)c[r]=arguments[r];return(t=e.call.apply(e,[this].concat(c))).state={name:"",number:""},t.handleInputChange=function(e){var n=e.target,a=n.name,c=n.value;t.setState(Object(b.a)({id:Object(p.a)(8)},a,c))},t.handleSubmit=function(e){e.preventDefault(),t.props.onSubmit(t.state)},t}return Object(l.a)(n,[{key:"render",value:function(){return Object(f.jsxs)("form",{className:j.a.mainForm,onSubmit:this.handleSubmit,children:[Object(f.jsx)("label",{htmlFor:"name",children:"Name"}),Object(f.jsx)("input",{className:j.a.nameInput,type:"text",name:"name",id:"name",pattern:"^[a-zA-Z\u0430-\u044f\u0410-\u042f]+(([' -][a-zA-Z\u0430-\u044f\u0410-\u042f ])?[a-zA-Z\u0430-\u044f\u0410-\u042f]*)*$",title:"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan",required:!0,value:this.name,onChange:this.handleInputChange}),Object(f.jsx)("label",{htmlFor:"number",children:"Number"}),Object(f.jsx)("input",{className:j.a.telInput,type:"tel",id:"number",name:"number",pattern:"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}",title:"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +",required:!0,value:this.number,onChange:this.handleInputChange}),Object(f.jsx)("button",{className:j.a.submitButton,type:"submit",children:"Add contact"})]})}}]),n}(d.Component),O=n(3),v=n.n(O);function _(t){var e=t.contacts,n=t.onDelete;return Object(f.jsx)("ul",{className:v.a.contactList,children:e.map((function(t){var e=t.name,a=t.number,c=t.id;return Object(f.jsxs)("li",{className:v.a.contactItem,children:[Object(f.jsxs)("p",{className:v.a.contactName,children:[e,": ",a]}),Object(f.jsx)("button",{className:v.a.contactButton,type:"button",onClick:function(){return n(e)},children:"delete"})]},c)}))})}var x=n(13),g=n.n(x);function F(t){var e=t.value,n=t.onChange;return Object(f.jsxs)(f.Fragment,{children:[Object(f.jsx)("label",{htmlFor:"filter",children:"Find contacts by name"}),Object(f.jsx)("input",{className:g.a.filterInput,id:"filter",type:"text",name:"filter",pattern:"^[a-zA-Z\u0430-\u044f\u0410-\u042f]+(([' -][a-zA-Z\u0430-\u044f\u0410-\u042f ])?[a-zA-Z\u0430-\u044f\u0410-\u042f]*)*$",title:"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan",value:e,onChange:n})]})}var N=n(14),y=n.n(N),A=function(t){Object(u.a)(n,t);var e=Object(m.a)(n);function n(){var t;Object(i.a)(this,n);for(var a=arguments.length,c=new Array(a),r=0;r<a;r++)c[r]=arguments[r];return(t=e.call.apply(e,[this].concat(c))).state={contacts:[{id:"id-1",name:"Rosie Simpson",number:"459-12-56"},{id:"id-2",name:"Hermione Kline",number:"443-89-12"},{id:"id-3",name:"Eden Clements",number:"645-17-79"},{id:"id-4",name:"Annie Copeland",number:"227-91-26"},{id:"id-5",name:"Vladislav Sl",number:"555-77-58"}],filter:""},t.addContact=function(e){var n=Object.values(t.state.contacts).find((function(t){return t.name===e.name}));console.log(n),n?alert("contact is added"):t.setState((function(t){var n=t.contacts;return{contacts:[].concat(Object(s.a)(n),[e])}}))},t.setFilter=function(e){t.setState({filter:e.target.value})},t.filterContacts=function(){var e=t.state,n=e.filter,a=e.contacts,c=n.toLowerCase();return a.filter((function(t){return t.name.toLocaleLowerCase().includes(c)}))},t.deleteContact=function(e){var n=t.state.contacts.filter((function(t){return t.name!==e}));console.log(n),t.setState({contacts:n})},t}return Object(l.a)(n,[{key:"render",value:function(){var t=this.filterContacts();return Object(f.jsxs)("div",{className:y.a.app,children:[Object(f.jsx)("h1",{children:"Phonebook"}),Object(f.jsx)(C,{onSubmit:this.addContact}),Object(f.jsx)("h2",{children:"Contacts"}),Object(f.jsx)(F,{value:this.state.filter,onChange:this.setFilter}),Object(f.jsx)(_,{contacts:t,onDelete:this.deleteContact})]})}}]),n}(d.Component),I=A;n(21);o.a.render(Object(f.jsx)(c.a.StrictMode,{children:Object(f.jsx)(I,{})}),document.getElementById("root"))},3:function(t,e,n){t.exports={contactItem:"ContactList_contactItem__3o9pQ",contactName:"ContactList_contactName__35CAF",contactButton:"ContactList_contactButton__1Yhut"}}},[[22,1,2]]]);
//# sourceMappingURL=main.35d4b7df.chunk.js.map